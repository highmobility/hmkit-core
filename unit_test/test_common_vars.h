//
// Created by Maidu Ule on 01/12/2017.
//

#include <stdint.h>
#include "hmkit_core_protocol.h"

static uint8_t test_advertisement_data[32] = {};

static uint8_t test_issuer_data[4];

static uint8_t test_character = 123;
static uint8_t test_start_data[1] = { 0x00 }; 
static uint8_t test_ack[1] = { 0x01 };
static uint8_t test_protocol_get_nonce[1] = {ID_CRYPTO_GET_NONCE};
static uint8_t test_protocol_get_device_cert[1] = {ID_CRYPTO_GET_DEVICE_CERTIFICATE};
static uint8_t test_protocol_register_cert[1] = {ID_CRYPTO_REGISTER_CERTIFICATE};
static uint8_t test_protocol_store_cert[1] = {ID_CRYPTO_STORE_CERTIFICATE};
static uint8_t test_protocol_get_stored_cert[1] = {ID_CRYPTO_GET_CERTIFICATE};
static uint8_t test_protocol_authenticatet[1] = {ID_CRYPTO_AUTHENTICATE};
static uint8_t test_protocol_authenticatet_done[1] = {ID_CRYPTO_AUTHENTICATE_DONE};
static uint8_t test_protocol_secure_container[1] = {ID_CRYPTO_CONTAINER};
static uint8_t test_protocol_revoke[1] = {ID_CRYPTO_REVOKE};
static uint8_t test_end_data[1] = { 0xFF }; 

static uint8_t test_nonce[9] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 };

static uint8_t test_serial[9] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09 };

static uint8_t test_get_nonce_result_data[13] = { 0x00, 0x01, 0x30, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xFF };
static uint8_t test_get_device_cert_result_data[159] = { 0x00, 0x01, 0x31, 0x48, 0x49, 0x4D, 0x4C, 0xBB, 0x81, 0x49, 0xAB, 0xBE, 0x90, 0x6F, 0x25, 0xD7, 0x16, 0xE8, 0xDE, 0x01, 0x23, 0x19, 0x10, 0xD6, 0x2C, 0xA5, 0x71, 0xEE, 0x36, 0x4B, 0x85, 0x24, 0x23, 0xF4, 0x5F, 0x09, 0x81, 0x34, 0x95, 0xDC, 0x28, 0x1C, 0x26, 0xC3, 0xFB, 0xBA, 0x83, 0x5D, 0xE0, 0x4A, 0x48, 0xFC, 0x06, 0x6A, 0xFD, 0xDF, 0x19, 0x0B, 0xE3, 0x40, 0xB2, 0x88, 0xC0, 0xB2, 0x8E, 0xFA, 0x1C, 0xA6, 0x9E, 0xD0, 0xD2, 0x3A, 0xED, 0x83, 0x53, 0x33, 0xFE, 0xFE, 0xE7, 0x11, 0xD6, 0x23, 0x8E, 0xB1, 0xE4, 0x9B, 0x59, 0x35, 0x83, 0x36, 0xDE, 0xE1, 0xDD, 0x5F, 0x9A, 0xB5, 0x6F, 0x31, 0x53, 0x49, 0x6B, 0x06, 0xF1, 0x33, 0x6A, 0x36, 0xF6, 0x60, 0xD1, 0xA6, 0xC2, 0x67, 0xAF, 0x76, 0x06, 0x86, 0x42, 0xD6, 0x44, 0x6D, 0x22, 0x9B, 0x75, 0x49, 0xB5, 0xEE, 0x34, 0x49, 0x1D, 0x1A, 0x5B, 0x39, 0xF3, 0xE8, 0xBC, 0xC9, 0x1A, 0x1A, 0xED, 0x1A, 0xB2, 0xEB, 0x96, 0xE1, 0x97, 0xA9, 0xF9, 0x2E, 0xF2, 0x81, 0x23, 0x04, 0xFE, 0xFF, 0xF0, 0x0B, 0x45, 0xC8, 0xFF  };
static uint8_t test_register_certificate[132] = {0x00, 0x01, 0x32, 0x18, 0x6C, 0x5A, 0x2E, 0x75, 0x45, 0xA3, 0x41, 0xAD, 0x51, 0x65, 0xD2, 0xC6, 0xF9, 0xE0, 0xC1, 0xC1, 0x40, 0x93, 0x91, 0x9E, 0x49, 0xA4, 0x2F, 0xB4, 0xF3, 0x7B, 0xD6, 0x49, 0x46, 0xA0, 0xB0, 0xC7, 0x5B, 0xA5, 0x3B, 0xF5, 0x40, 0x66, 0x4D, 0xB0, 0x6D, 0xCB, 0xCD, 0x28, 0x46, 0xBC, 0xC9, 0x8F, 0xB2, 0x03, 0x12, 0xA8, 0xA6, 0x35, 0x6F, 0x8A, 0xD0, 0xB5, 0x09, 0x84, 0xF7, 0x2B, 0x46, 0x18, 0x6C, 0x5A, 0x2E, 0x75, 0x45, 0xA3, 0x41, 0xAD, 0x51, 0x65, 0xD2, 0xC6, 0xF9, 0xE0, 0xC1, 0xC1, 0x40, 0x93, 0x91, 0x9E, 0x49, 0xA4, 0x2F, 0xB4, 0xF3, 0x7B, 0xD6, 0x49, 0x46, 0xA0, 0xB0, 0xC7, 0x5B, 0xA5, 0x3B, 0xF5, 0x40, 0x66, 0x4D, 0xB0, 0x6D, 0xCB, 0xCD, 0x28, 0x46, 0xBC, 0xC9, 0x8F, 0xB2, 0x03, 0x12, 0xA8, 0xA6, 0x35, 0x6F, 0x8A, 0xD0, 0xB5, 0x09, 0x84, 0xF7, 0x2B, 0x46, 0xFF };
static uint8_t test_store_certificate[4] = { 0x00, 0x01, 0x33, 0xFF };
static uint8_t test_get_stored_cert_result_data[169] = { 0x00, 0x01, 0x34, 0x01, 0x74, 0x6D, 0x63, 0x73, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x44, 0x75, 0x48, 0xD5, 0x98, 0xF9, 0xB7, 0xBF, 0xCA, 0x75, 0x28, 0x03, 0x9F, 0x44, 0xA1, 0x9E, 0x4E, 0x67, 0xD1, 0x8D, 0xE6, 0xC8, 0xEC, 0x09, 0x26, 0x17, 0x90, 0x90, 0x4B, 0x86, 0xEE, 0x72, 0x97, 0x22, 0x48, 0x60, 0xDB, 0xAF, 0xB7, 0x04, 0xB9, 0xE3, 0xDA, 0x51, 0x3C, 0x39, 0xBD, 0x1B, 0x8C, 0x8A, 0xE0, 0x6D, 0xCB, 0xA8, 0x6F, 0xC3, 0xBD, 0xCA, 0xF0, 0x4D, 0x7C, 0xB8, 0xFB, 0xD3, 0x11, 0x01, 0x01, 0x01, 0x01, 0x11, 0x02, 0x02, 0x01, 0x01, 0x03, 0x01, 0x02, 0x03, 0x18, 0x6C, 0x5A, 0x2E, 0x75, 0x45, 0xA3, 0x41, 0xAD, 0x51, 0x65, 0xD2, 0xC6, 0xF9, 0xE0, 0xC1, 0xC1, 0x40, 0x93, 0x91, 0x9E, 0x49, 0xA4, 0x2F, 0xB4, 0xF3, 0x7B, 0xD6, 0x49, 0x46, 0xA0, 0xB0, 0xC7, 0x5B, 0xA5, 0x3B, 0xF5, 0x40, 0x66, 0x4D, 0xB0, 0x6D, 0xCB, 0xCD, 0x28, 0x46, 0xBC, 0xC9, 0x8F, 0xB2, 0x03, 0x12, 0xA8, 0xA6, 0x35, 0x6F, 0x8A, 0xD0, 0xB5, 0x09, 0x84, 0xF7, 0x2B, 0x46, 0xFF};
static uint8_t test_authenticate_result_data[77] =  { 0x00, 0x01, 0x35, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x18, 0x6C, 0x5A, 0x2E, 0x75, 0x45, 0xA3, 0x41, 0xAD, 0x51, 0x65, 0xD2, 0xC6, 0xF9, 0xE0, 0xC1, 0xC1, 0x40, 0x93, 0x91, 0x9E, 0x49, 0xA4, 0x2F, 0xB4, 0xF3, 0x7B, 0xD6, 0x49, 0x46, 0xA0, 0xB0, 0xC7, 0x5B, 0xA5, 0x3B, 0xF5, 0x40, 0x66, 0x4D, 0xB0, 0x6D, 0xCB, 0xCD, 0x28, 0x46, 0xBC, 0xC9, 0x8F, 0xB2, 0x03, 0x12, 0xA8, 0xA6, 0x35, 0x6F, 0x8A, 0xD0, 0xB5, 0x09, 0x84, 0xF7, 0x2B, 0x46, 0xFF};
static uint8_t test_authenticate_done_result_data[4] = { 0x00, 0x01, 0x40, 0xFF};
static uint8_t test_custom_command_result_data_v1[40] = { 0x00, 0x01, 0x36, 0xFE, 0x00, 0xFE, 0x00, 0x2F, 0xBD, 0x04, 0xD4, 0x76, 0x3E, 0xB4, 0xAD, 0xD5, 0x28, 0xC1, 0xC3, 0x49, 0xDF, 0x0E, 0xE9, 0x79, 0x8D, 0xE6, 0x27, 0x6D, 0x13, 0xD8, 0xDE, 0xDF, 0x77, 0x24, 0x6C, 0xB5, 0x8D, 0xA3, 0x4B, 0xFF };
static uint8_t test_custom_command_result_data_v2[49] = { 0x00, 0x01, 0x36, 0x02, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0x01, 0x04, 0x2F, 0xBD, 0x04, 0xD4, 0x76, 0x3E, 0xB4, 0xAD, 0xD5, 0x28, 0xC1, 0xC3, 0x49, 0xDF, 0x0E, 0xE9, 0x79, 0x8D, 0xE6, 0x27, 0x6D, 0x13, 0xD8, 0xDE, 0xDF, 0x77, 0x24, 0x6C, 0xB5, 0x8D, 0xA3, 0x4B, 0xFF };
static uint8_t test_revoke_result_data[8] = { 0x00, 0x01, 0x38, 0xFE, 0x00, 0xFE, 0x00, 0xFF };
// Error type invalid signature: 0x06, Command ID: 0x31 (get device cert)
static uint8_t test_get_device_cert_resp_error_data[5] = {0x00, 0x41, 0x31, 0x06, 0xFF};

static uint8_t test_mac_data[6] = {0x01,0x02,0x03,0x04,0x05,0x06};
static uint8_t test_mac_type_data = 1;

static uint8_t hm_bt_hal_connect_called = 0;
static uint8_t hm_bt_hal_service_discovery_called = 0;

static uint8_t test_signature[64] = { 0x18, 0x6c, 0x5a, 0x2e, 0x75, 0x45, 0xa3, 0x41, 0xad, 0x51, 0x65, 0xd2, 0xc6, 0xf9, 0xe0, 0xc1, 0xc1, 0x40, 0x93, 0x91, 0x9e, 0x49, 0xa4, 0x2f, 0xb4, 0xf3, 0x7b, 0xd6, 0x49, 0x46, 0xa0, 0xb0, 0xc7, 0x5b, 0xa5, 0x3b, 0xf5, 0x40, 0x66, 0x4d, 0xb0, 0x6d, 0xcb, 0xcd, 0x28, 0x46, 0xbc, 0xc9, 0x8f, 0xb2, 0x03, 0x12, 0xa8, 0xa6, 0x35, 0x6f, 0x8a, 0xd0, 0xb5, 0x09, 0x84, 0xf7, 0x2b, 0x46 };

static uint8_t test_pub_key[64] = { 0x18, 0x6c, 0x5a, 0x2e, 0x75, 0x45, 0xa3, 0x41, 0xad, 0x51, 0x65, 0xd2, 0xc6, 0xf9, 0xe0, 0xc1, 0xc1, 0x40, 0x93, 0x91, 0x9e, 0x49, 0xa4, 0x2f, 0xb4, 0xf3, 0x7b, 0xd6, 0x49, 0x46, 0xa0, 0xb0, 0xc7, 0x5b, 0xa5, 0x3b, 0xf5, 0x40, 0x66, 0x4d, 0xb0, 0x6d, 0xcb, 0xcd, 0x28, 0x46, 0xbc, 0xc9, 0x8f, 0xb2, 0x03, 0x12, 0xa8, 0xa6, 0x35, 0x6f, 0x8a, 0xd0, 0xb5, 0x09, 0x84, 0xf7, 0x2b, 0x46 };
static uint8_t test_ecdh[32];

static uint8_t test_hmac[32] = { 0x2f, 0xbd, 0x04, 0xd4, 0x76, 0x3e, 0xb4, 0xad, 0xd5, 0x28, 0xc1, 0xc3, 0x49, 0xdf, 0x0e, 0xe9, 0x79, 0x8d, 0xe6, 0x27, 0x6d, 0x13, 0xd8, 0xde, 0xdf, 0x77, 0x24, 0x6c, 0xb5, 0x8d, 0xa3, 0x4b };
static uint8_t test_device_certificate[153] = {
          0x48, 0x49, 0x4D, 0x4C,
          0xBB, 0x81, 0x49, 0xAB, 0xBE, 0x90, 0x6F, 0x25, 0xD7, 0x16, 0xE8, 0xDE,
          0x01, 0x23, 0x19, 0x10, 0xD6, 0x2C, 0xA5, 0x71, 0xEE,
          0x36, 0x4B, 0x85, 0x24, 0x23, 0xF4, 0x5F, 0x09, 0x81, 0x34, 0x95, 0xDC, 0x28, 0x1C, 0x26, 0xC3, 0xFB, 0xBA, 0x83, 0x5D, 0xE0, 0x4A, 0x48, 0xFC, 0x06, 0x6A, 0xFD, 0xDF, 0x19, 0x0B, 0xE3, 0x40, 0xB2, 0x88, 0xC0, 0xB2, 0x8E, 0xFA, 0x1C, 0xA6, 0x9E, 0xD0, 0xD2, 0x3A, 0xED, 0x83, 0x53, 0x33, 0xFE, 0xE7, 0x11, 0xD6, 0x23, 0x8E, 0xB1, 0xE4, 0x9B, 0x59, 0x35, 0x83, 0x36, 0xDE, 0xE1, 0xDD,
          0x5f, 0x9a, 0xb5, 0x6f, 0x31, 0x53, 0x49, 0x6b, 0x06, 0xf1, 0x33, 0x6a, 0x36, 0xf6, 0x60, 0xd1, 0xa6, 0xc2, 0x67, 0xaf, 0x76, 0x06, 0x86, 0x42, 0xd6, 0x44, 0x6d, 0x22, 0x9b, 0x75, 0x49, 0xb5, 0xee, 0x34, 0x49, 0x1d, 0x1a, 0x5b, 0x39, 0xf3, 0xe8, 0xbc, 0xc9, 0x1a, 0x1a, 0xed, 0x1a, 0xb2, 0xeb, 0x96, 0xe1, 0x97, 0xa9, 0xf9, 0x2e, 0xf2, 0x81, 0x23, 0x04, 0xff, 0xf0, 0x0b, 0x45, 0xc8
};

//Test Error Command case. Device Cert with Wrong signature
static uint8_t test_device_certificate_err[153] = {
          0x48, 0x49, 0x4D, 0x4C,
          0xBB, 0x81, 0x49, 0xAB, 0xBE, 0x90, 0x6F, 0x25, 0xD7, 0x16, 0xE8, 0xDE,
          0x01, 0x23, 0x19, 0x10, 0xD6, 0x2C, 0xA5, 0x71, 0xEE,
          0x36, 0x11, 0x85, 0x24, 0x23, 0xF4, 0x5F, 0x09, 0x81, 0x34, 0x95, 0xDC, 0x28, 0x1C, 0x26, 0xC3, 0xFB, 0xBA, 0x83, 0x5D, 0xE0, 0x4A, 0x48, 0xFC, 0x06, 0x6A, 0xFD, 0xDF, 0x19, 0x0B, 0xE3, 0x40, 0xB2, 0x88, 0xC0, 0xB2, 0x8E, 0xFA, 0x1C, 0xA6, 0x9E, 0xD0, 0xD2, 0x3A, 0xED, 0x83, 0x53, 0x33, 0xFE, 0xE7, 0x11, 0xD6, 0x23, 0x8E, 0xB1, 0xE4, 0x9B, 0x59, 0x35, 0x83, 0x36, 0xDE, 0xE1, 0xDD,
          // Wrong signature. test_device_certificate contains the correct signature
          0x18, 0x6c, 0x5a, 0x2e, 0x75, 0x45, 0xa3, 0x41, 0xad, 0x51, 0x65, 0xd2, 0xc6, 0xf9, 0xe0, 0xc1, 0xc1, 0x40, 0x93, 0x91, 0x9e, 0x49, 0xa4, 0x2f, 0xb4, 0xf3, 0x7b, 0xd6, 0x49, 0x46, 0xa0, 0xb0, 0xc7, 0x5b, 0xa5, 0x3b, 0xf5, 0x40, 0x66, 0x4d, 0xb0, 0x6d, 0xcb, 0xcd, 0x28, 0x46, 0xbc, 0xc9, 0x8f, 0xb2, 0x03, 0x12, 0xa8, 0xa6, 0x35, 0x6f, 0x8a, 0xd0, 0xb5, 0x09, 0x84, 0xf7, 0x2b, 0x46
          // Correct Signature
          //0x5f, 0x9a, 0xb5, 0x6f, 0x31, 0x53, 0x49, 0x6b, 0x06, 0xf1, 0x33, 0x6a, 0x36, 0xf6, 0x60, 0xd1, 0xa6, 0xc2, 0x67, 0xaf, 0x76, 0x06, 0x86, 0x42, 0xd6, 0x44, 0x6d, 0x22, 0x9b, 0x75, 0x49, 0xb5, 0xee, 0x34, 0x49, 0x1d, 0x1a, 0x5b, 0x39, 0xf3, 0xe8, 0xbc, 0xc9, 0x1a, 0x1a, 0xed, 0x1a, 0xb2, 0xeb, 0x96, 0xe1, 0x97, 0xa9, 0xf9, 0x2e, 0xf2, 0x81, 0x23, 0x04, 0xff, 0xf0, 0x0b, 0x45, 0xc8
};

static uint8_t test_access_certificate[165] = {0x01, 0x74, 0x6D, 0x63, 0x73, 0x01, 0x02, 0x03, \
                                          0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x01, 0x02, \
                                          0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x44, \
                                          0x75, 0x48, 0xD5, 0x98, 0xF9, 0xB7, 0xBF, 0xCA, \
                                          0x75, 0x28, 0x03, 0x9F, 0x44, 0xA1, 0x9E, 0x4E, \
                                          0x67, 0xD1, 0x8D, 0xE6, 0xC8, 0xEC, 0x09, 0x26, \
                                          0x17, 0x90, 0x90, 0x4B, 0x86, 0xEE, 0x72, 0x97, \
                                          0x22, 0x48, 0x60, 0xDB, 0xAF, 0xB7, 0x04, 0xB9, \
                                          0xE3, 0xDA, 0x51, 0x3C, 0x39, 0xBD, 0x1B, 0x8C, \
                                          0x8A, 0xE0, 0x6D, 0xCB, 0xA8, 0x6F, 0xC3, 0xBD, \
                                          0xCA, 0xF0, 0x4D, 0x7C, 0xB8, 0xFB, 0xD3, 0x11, \
                                          0x01, 0x01, 0x01, 0x01, 0x11, 0x02, 0x02, 0x01, \
                                          0x01, 0x03, 0x01, 0x02, 0x03, \
                                          0x18, 0x6c, 0x5a, 0x2e, 0x75, 0x45, 0xa3, 0x41, 0xad, 0x51, 0x65, 0xd2, 0xc6, 0xf9, 0xe0, 0xc1, 0xc1, 0x40, 0x93, 0x91, 0x9e, 0x49, 0xa4, 0x2f, 0xb4, 0xf3, 0x7b, 0xd6, 0x49, 0x46, 0xa0, 0xb0, 0xc7, 0x5b, 0xa5, 0x3b, 0xf5, 0x40, 0x66, 0x4d, 0xb0, 0x6d, 0xcb, 0xcd, 0x28, 0x46, 0xbc, 0xc9, 0x8f, 0xb2, 0x03, 0x12, 0xa8, 0xa6, 0x35, 0x6f, 0x8a, 0xd0, 0xb5, 0x09, 0x84, 0xf7, 0x2b, 0x46};